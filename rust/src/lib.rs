/* automatically generated by rust-bindgen 0.69.1 */

use std::ffi::CString;

struct PacketInfo {
    short_repr: CString,
    long_text: CString,
}

pub type ResultHandle = *mut ::std::os::raw::c_void;

#[no_mangle]
pub fn ingest_data(
    stream: ::std::os::raw::c_int,
    from_server: ::std::os::raw::c_int,
    data: *const ::std::os::raw::c_uchar,
    len: ::std::os::raw::c_uint,
) -> ResultHandle {
    let res = PacketInfo {
        short_repr: CString::new("Short".to_string()).unwrap(),
        long_text: CString::new("Long representation".to_string()).unwrap(),
    };
    Box::into_raw(Box::new(res)).cast()
}
#[no_mangle]
pub fn free_handle(arg1: ResultHandle) {
    let _ = unsafe { Box::<PacketInfo>::from_raw(arg1.cast()) };
}
#[no_mangle]
pub fn get_short_representation(arg1: ResultHandle) -> *const ::std::os::raw::c_char {
    let obj: &PacketInfo = unsafe { &*(arg1.cast::<PacketInfo>()) };
    obj.short_repr.as_ptr()
}
#[no_mangle]
pub fn get_long_text(arg1: ResultHandle) -> *const ::std::os::raw::c_char {
    let obj: &PacketInfo = unsafe { &*(arg1.cast::<PacketInfo>()) };
    obj.long_text.as_ptr()
}
